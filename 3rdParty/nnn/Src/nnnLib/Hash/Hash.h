//--------------------------------------------------------------------------------------
// Copyright (c) AcgDev
// https://www.AcgDev.com/
//
// Desc : 计算 Hash
//（Hash 效率：md5 > crc32 > crc64 > sha1 > ripemd160 > sha256 > sha512 > sha384）
//--------------------------------------------------------------------------------------

#pragma once
#ifndef _NNNLIB___HASH___HASH_H_
#define _NNNLIB___HASH___HASH_H_

#include "../../common/common.h"

#include "Hash-inc.h"

namespace NNN
{
namespace Hash
{

/*
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| 算法            | 发布年份 | 长度(位)      | 相对速度            | 安全性                       | 硬件加速                                 |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| CRC32           | 1975     | 32            | 极快 (~10+ GB/s)    | 检错，不安全                 | SSE4.2 CRC32 指令/ARMv8+ CRC32 指令      |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| CRC64           | 1980     | 64            | 极快 (~5-10 GB/s)   | 检错，不安全                 | PCLMUL(Carry-less Multiply) 与 AVX2/SIMD |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| MD4             | 1990     | 128           | 非常快 (~1-2 GB/s)  | 已破坏（碰撞）               | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| MD5             | 1992     | 128           | 快 (~1 GB/s)        | 弱（碰撞攻击）               | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| MDC-2           | 1990     | 128           | 慢 (~100 MB/s)      | 弱（部分攻击）               | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| RIPEMD-160      | 1996     | 160           | 中等 (~300 MB/s)    | 较弱（半碰撞）               | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHA-1           | 1995     | 160           | 中等 (~500 MB/s)    | 弱（碰撞）                   | Intel SHA 扩展                           |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHA-224         | 2001     | 224           | 中等 (~500 MB/s)    | 强                           | Intel SHA 扩展                           |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHA-256         | 2001     | 256           | 中等 (~500 MB/s)    | 强                           | Intel SHA 扩展                           |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHA-384         | 2001     | 384           | 较慢 (~300 MB/s)    | 强                           | Intel SHA 扩展                           |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHA-512         | 2001     | 512           | 中等 (~600 MB/s)    | 强                           | Intel SHA 扩展                           |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHA3-224        | 2015     | 224           | 较慢 (~200 MB/s)    | 强                           | 无（Keccak 基础）                        |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHA3-256        | 2015     | 256           | 较慢 (~200 MB/s)    | 强                           | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHA3-384        | 2015     | 384           | 较慢 (~200 MB/s)    | 强                           | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHA3-512        | 2015     | 512           | 较慢 (~200 MB/s)    | 强                           | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SM3             | 2010     | 256           | 中等 (~200 MB/s)    | 强                           | 龙芯 3A/3B、兆芯等支持 SM3 指令          |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHAKE128        | 2015     | 可变（>=128） | 较慢 (~200 MB/s)    | 强                           | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| SHAKE256        | 2015     | 可变（>=256） | 较慢 (~200 MB/s)    | 强                           | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| BLAKE2s-256     | 2013     | 256           | 快 (~1–2 GB/s)     | 强                           | 可借助 SSE2、SSE4.1、AVX2、AVX-512、NEON |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| BLAKE2b-512     | 2013     | 512           | 非常快 (~3–4 GB/s) | 强                           | 可借助 SSE2、SSE4.1、AVX2、AVX-512、NEON |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| BLAKE2sp(4-way) | 2013     | 256           | 极快 (~6–10 GB/s)  | 强                           | 可借助 SSE2、SSE4.1、AVX2、AVX-512、NEON |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| Whirlpool       | 2000     | 512           | 慢 (~150 MB/s)      | 强                           | 无                                       |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+
	| XXH64           | 2012     | 64            | 极快 (~19.4 GB/s)   | 非密码学散列，不具备安全性   | 无专用指令，可借助 SIMD/AVX 向量化优化   |
	+-----------------+----------+---------------+---------------------|                              |------------------------------------------+
	| XXH32           | 2012     | 32            | 极快 (~9.7 GB/s)    | 主要用途：                   | 无专用指令，可借助 SSE4.1 或 NEON        |
	+-----------------+----------+---------------+---------------------| 文件完整性校验、             |------------------------------------------+
	| XXH3            | 2021     | 64            | 极快 (~31.5 GB/s)   | 快速校验(checksums)          | 无专用指令                               |
	| (XXH3_64bits)   |          |               |                     | 哈希表与布隆过滤器中的键散列 | SSE2、AVX2、NEON、POWER8 等 SIMD         |
	+-----------------+----------+---------------+---------------------| 数据去重与大数据分区         |------------------------------------------+
	| XXH128          | 2021     | 128           | 极快 (~31.5 GB/s)   | 实时流数据的高吞吐标签与校验 | 无专用指令                               |
	| (XXH3_128bits)  |          |               |                     |                              | SSE2、AVX2、NEON、POWER8 等 SIMD         |
	+-----------------+----------+---------------+---------------------+------------------------------+------------------------------------------+

	CRC 系列只是检错算法，不具备密码学安全，通常用于校验和。
	MD4/MD5、MDC2、RIPEMD-160、SHA-1 都已被证明有碰撞风险，不再推荐用于安全场景。
	SHA-2（SHA-224/256/384/512）在现代 CPU 上有硬件加速指令，性能中等，广泛使用。
	SHA3 系列基于 Keccak，设计完全不同，硬件加速较少，但抗侧信道能力更强。
	SHAKE（可变输出）适合 XOF 场景，但速度与 SHA3 相当。
	BLAKE2 系列结合了高性能和安全性，是新一代推荐选项，且易于向量化。
	SM3 属于中国密码标准，部分国产处理器提供指令支持。
	Whirlpool 虽然安全但速度较慢，很少在现代系统中单独使用。
	根据 xxHash 官方基准测试，XXH64 在大块数据下可达到约 19.4 GB/s 的吞吐量。它通过精心选择的常数、分块处理及最小化分支，实现了在现代 CPU 上接近内存带宽的性能，但并不适用于任何需要抗碰撞或抗篡改的场景。
*/

// 计算 Hash 值
NNN_API HRESULT	ComputeHash(es_HashType type, const void *input_data, size_t input_len, __out BYTE *output);
NNN_API HRESULT	ComputeHash(es_HashType type, const void *input_data, size_t input_len, __out char *output);
NNN_API HRESULT	ComputeHash(es_HashType type, const void *input_data, size_t input_len, __out WCHAR *output);

// 获取 Hash 的长度
NNN_API inline size_t	GetHashLen(es_HashType type)
{
	switch(type)
	{
	case es_HashType::CRC32:		return CRC32_LEN;
	case es_HashType::CRC64:		return CRC64_LEN;
	case es_HashType::MD5:			return MD5_LEN;
	case es_HashType::RIPEMD160:	return RIPEMD160_LEN;
	case es_HashType::SHA1:			return SHA1_LEN;
	case es_HashType::MD5_SHA1:		return MD5_SHA1_LEN;
	case es_HashType::SHA224:		return SHA224_LEN;
	case es_HashType::SHA256:		return SHA256_LEN;
	case es_HashType::SHA384:		return SHA384_LEN;
	case es_HashType::SHA512:		return SHA512_LEN;
	case es_HashType::SHA512_224:	return SHA512_224_LEN;
	case es_HashType::SHA512_256:	return SHA512_256_LEN;

	case es_HashType::SHA3_224:		return SHA3_224_LEN;
	case es_HashType::SHA3_256:		return SHA3_256_LEN;
	case es_HashType::SHA3_384:		return SHA3_384_LEN;
	case es_HashType::SHA3_512:		return SHA3_512_LEN;

	case es_HashType::SM3:			return SM3_LEN;
	case es_HashType::BLAKE2s_256:	return BLAKE2S_LEN;
	case es_HashType::BLAKE2b_512:	return BLAKE2B_LEN;
	case es_HashType::BLAKE2sp:		return BLAKE2S_LEN;
	case es_HashType::BLAKE2bp:		return BLAKE2B_LEN;
	case es_HashType::Whirlpool:	return WHIRLPOOL_LEN;

	case es_HashType::XXH32:		return XXH32_LEN;
	case es_HashType::XXH64:		return XXH64_LEN;
	case es_HashType::XXH3:			return XXH3_LEN;
	case es_HashType::XXH128:		return XXH128_LEN;
	}	// switch

	return 0;
}

}	// namespace Hash
}	// namespace NNN

#endif	// _NNNLIB___HASH___HASH_H_
